$date
	Fri May 31 01:38:11 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module cache_tb $end
$var wire 32 ! word_out [31:0] $end
$var wire 1 " mem_wr_en $end
$var wire 512 # mem_wr_blk [511:0] $end
$var wire 1 $ mem_rd_en $end
$var wire 512 % mem_rd_blk [511:0] $end
$var wire 32 & mem_addr [31:0] $end
$var wire 1 ' hit $end
$var wire 8 ( byte_out [7:0] $end
$var parameter 32 ) CLK_CYCLES $end
$var parameter 32 * CLK_PERIOD $end
$var parameter 32 + RST_PULSE $end
$var reg 32 , addr [31:0] $end
$var reg 1 - clk $end
$var reg 32 . data_wr [31:0] $end
$var reg 1 / rd_en $end
$var reg 1 0 rst_n $end
$var reg 1 1 wr_en $end
$scope module CACHE_DUT $end
$var wire 32 2 addr [31:0] $end
$var wire 1 - clk $end
$var wire 32 3 data_wr [31:0] $end
$var wire 1 / rd_en $end
$var wire 1 0 rst_n $end
$var wire 1 1 wr_en $end
$var wire 32 4 word_out [31:0] $end
$var wire 1 " mem_wr_en $end
$var wire 512 5 mem_wr_blk [511:0] $end
$var wire 1 $ mem_rd_en $end
$var wire 512 6 mem_rd_blk [511:0] $end
$var wire 32 7 mem_addr [31:0] $end
$var wire 1 ' hit $end
$var wire 8 8 byte_out [7:0] $end
$var integer 32 9 i [31:0] $end
$var integer 32 : j [31:0] $end
$scope module CACHE_CNTRL $end
$var wire 32 ; addr [31:0] $end
$var wire 1 - clk $end
$var wire 32 < data_wr [31:0] $end
$var wire 1 ' hit $end
$var wire 1 / rd_en $end
$var wire 1 0 rst_n $end
$var wire 1 1 wr_en $end
$var wire 512 = mem_rd_blk [511:0] $end
$var parameter 3 > EVICT $end
$var parameter 3 ? IDLE $end
$var parameter 3 @ RD_HIT $end
$var parameter 3 A RD_MISS $end
$var parameter 3 B WR_HIT $end
$var parameter 3 C WR_MISS $end
$var reg 8 D byte_out [7:0] $end
$var reg 32 E mem_addr [31:0] $end
$var reg 1 $ mem_rd_en $end
$var reg 512 F mem_wr_blk [511:0] $end
$var reg 1 " mem_wr_en $end
$var reg 3 G next [2:0] $end
$var reg 1 H rd_m $end
$var reg 3 I state [2:0] $end
$var reg 32 J word_out [31:0] $end
$var reg 1 K wr_m $end
$upscope $end
$upscope $end
$scope module MEM_DUT $end
$var wire 32 L addr [31:0] $end
$var wire 1 - clk $end
$var wire 1 $ rd_en $end
$var wire 512 M wr_data [511:0] $end
$var wire 1 " wr_en $end
$var parameter 32 N BYTES_PER_WORD $end
$var parameter 42 O DEPTH $end
$var parameter 32 P INIT $end
$var parameter 32 Q NSEED_BLK $end
$var parameter 32 R SEED $end
$var parameter 32 S WIDTH $end
$var parameter 32 T WORDS_PER_BLOCK $end
$var reg 512 U rd_data [511:0] $end
$var integer 32 V byte_idx [31:0] $end
$var integer 32 W i [31:0] $end
$var integer 32 X j [31:0] $end
$var integer 32 Y word_idx [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 T
b1000 S
b1 R
b100 Q
b0 P
b10000000000 O
b100 N
b100 C
b11 B
b10 A
b1 @
b0 ?
b101 >
b11001 +
b1100100 *
b1010 )
$end
#0
$dumpvars
bx Y
b1000000 X
b100000000 W
bx V
bx U
bx M
bx L
xK
bx J
bx I
xH
bx G
bx F
bx E
bx D
bx =
bx <
b0 ;
b10000000 :
b100 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
b0 2
01
x0
1/
bx .
1-
b0 ,
bx (
x'
bx &
bx %
x$
bx #
x"
bx !
$end
#50
0-
#100
b10000000 :
b100 9
1-
#150
0-
#200
b10000000 :
b100 9
1-
#250
0-
#300
b10000000 :
b100 9
1-
#350
0-
#400
b10000000 :
b100 9
1-
#450
0-
#500
b10000000 :
b100 9
1-
#550
0-
#600
b10000000 :
b100 9
1-
#650
0-
#700
b10000000 :
b100 9
1-
#750
0-
#800
b10000000 :
b100 9
1-
#850
0-
#900
b10000000 :
b100 9
1-
#950
0-
#1000
b10000000 :
b100 9
1-
